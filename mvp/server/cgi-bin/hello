#! /usr/bin/env python

import cgitb
cgitb.enable()

import sys, os, json, hashlib, traceback, binascii


# Python 2/3 compatibility stuff
if str==bytes:
    from urlparse import parse_qs, parse_qsl
    from urllib import urlencode
    from urllib import urlopen
else:
    from urllib.parse import parse_qs, parse_qsl
    from urllib.parse import urlencode
    from urllib.request import urlopen
    sys.stdout=sys.stdout.buffer
    sys.stdin=sys.stdin.buffer


configfile=os.getenv("PROVER_MVP_CONFIG", "/etc/prover/prover.conf")
try:
    config=json.load(open(configfile, "rt"))
except:
    sys.stdout.write(b"Status: 500 Internal Server Error\n\nServer is not configured properly\n")
    sys.exit(0)

try:
    if os.environ["REQUEST_METHOD"]!="POST":
        sys.stdout.write(b"Status: 405 Method Not Allowed\n\nOnly POST method is allowed\n")
        sys.exit(0)

    if os.environ["CONTENT_TYPE"]!="application/x-www-form-urlencoded":
        sys.stdout.write(b"Status: 415 Unsupported Media Type\n\nOnly x-www-form-urlencoded content type is supported\n")
        sys.exit(0)

    data=sys.stdin.read().decode("latin1")
    query_args=parse_qs(data, keep_blank_values=True)
except Exception:
    sys.stdout.write(b"Status: 500 Internal Server Error\n\n"+traceback.format_exc().encode("utf8")+b"\n")
    sys.exit(0)

try:
    address=query_args["user"][0]
except:
    address=None

rpcrequest=[]
rpcrequest.append({"jsonrpc":"2.0", "method":"eth_gasPrice", "params":[], "id":"gp"})
#rpcrequest.append({"jsonrpc":"2.0", "method":"eth_blockNumber", "params":[], "id":"bn"})
if address is not None:
    rpcrequest.append({"jsonrpc":"2.0", "method":"eth_getTransactionCount", "params":[address, "latest"], "id":"tc"})
    rpcrequest.append({"jsonrpc":"2.0", "method":"eth_getBalance", "params":[address, "latest"], "id":"b"})

reply=urlopen("http://"+config["node"], json.dumps(rpcrequest).encode("latin1"))
if reply.getcode()!=200:
    sys.stdout.write(b"Status: 500 Internal Server Error\n\nNode error\n")
    sys.exit(0)

replyJson=json.loads(reply.read().decode("latin1"))

res=dict()
res["contractAddress"]=config["contract"]
res["gasPrice"]=[r["result"] for r in replyJson if r["id"]=="gp"][0]
if address is not None:
    res["nonce"]=[r["result"] for r in replyJson if r["id"]=="tc"][0]
    res["ethBalance"]=[r["result"] for r in replyJson if r["id"]=="b"][0]

sys.stdout.write(b"Status: 200 OK\nContent-Type: application/json\n\n"+json.dumps(res).encode("latin1")+b"\n")
