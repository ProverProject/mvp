#! /usr/bin/env python

import cgitb
cgitb.enable()

import os, sys, json, traceback, hashlib, binascii


def generateSwype(blockHash, txHash):
    global config
    modulo=config["swypeModulo"]

    digest=hashlib.sha256(binascii.a2b_hex(blockHash[2:]+txHash[2:])).digest()

    swypeid=0
    for c in digest:
        if type(c)!=int:
            c=ord(c)
        swypeid=(swypeid*256+c)%modulo

    seq=[5]   # always start from the center
    n=swypeid
    m=1
    while m<modulo:
        # 1 2 3
        # 4 5 6
        # 7 8 9
        neighbours=[
            [2, 4, 5],
            [1, 3, 4, 5, 6],
            [2, 5, 6],
            [1, 2, 5, 7, 8],
            [1, 2, 3, 4, 6, 7, 8, 9],
            [2, 3, 5, 8, 9],
            [4, 5, 8],
            [4, 5, 6, 7, 9],
            [5, 6, 8]
        ]
        curpt=seq[-1]
        nc=len(neighbours[curpt-1])
        nextpt=neighbours[curpt-1][n*nc//modulo]

        m*=nc
        n=(n*nc)%modulo

        seq.append(nextpt)

    return {"swype-id":swypeid, "swype-sequence":seq}

# Python 2/3 compatibility stuff
if str==bytes:
    from urlparse import parse_qs, parse_qsl
    from urllib import urlencode
    from urllib2 import urlopen
    from urllib2 import Request
else:
    from urllib.parse import parse_qs, parse_qsl
    from urllib.parse import urlencode
    from urllib.request import urlopen
    from urllib.request import Request
    sys.stdout=sys.stdout.buffer
    sys.stdin=sys.stdin.buffer


configfile=os.getenv("PROVER_MVP_CONFIG", "/etc/prover/prover.conf")
try:
    config=json.load(open(configfile, "rt"))
except:
    sys.stdout.write(b"Status: 500 Internal Server Error\n\nServer is not configured properly\n")
    sys.exit(0)

try:
    if os.environ["REQUEST_METHOD"]!="POST":
        sys.stdout.write(b"Status: 405 Method Not Allowed\n\nOnly POST method is allowed\n")
        sys.exit(0)

    if os.environ["CONTENT_TYPE"]!="application/x-www-form-urlencoded":
        sys.stdout.write(b"Status: 415 Unsupported Media Type\n\nOnly x-www-form-urlencoded content type is supported\n")
        sys.exit(0)

    data=sys.stdin.read().decode("latin1")
    query_args=parse_qs(data, keep_blank_values=True)
except Exception:
    sys.stdout.write(b"Status: 500 Internal Server Error\n\n"+traceback.format_exc().encode("utf8")+b"\n")
    sys.exit(0)

if "hex" in query_args:
    tx=query_args["hex"][0]

    # TODO: parse the transaction, check fields:
    # - target address MUST be config.contract
    # - value MUST be zero
    # - nonce MUST be equal to number of transactions sent from this sender (hence,
    #   I have to recover sender address from the signature)
    # - data MUST be requestSwypeCode method call

    rpcrequest={"jsonrpc":"2.0", "method":"eth_sendRawTransaction", "params":[tx], "id":0}

    request=Request("http://"+config["node"], data=json.dumps(rpcrequest).encode("latin1"), headers={"Content-Type": "application/json"})
    reply=urlopen(request)
    if reply.getcode()!=200:
        sys.stdout.write(b"Status: 500 Internal Server Error\n\nNode error\n")
        sys.exit(0)

    replyJson=json.loads(reply.read().decode("latin1"))
    del replyJson["jsonrpc"]
    del replyJson["id"]

    sys.stdout.write(b"Status: 200 OK\nContent-Type: application/json\n\n"+json.dumps(replyJson).encode("latin1")+b"\n")
elif "txhash" in query_args:
    txhash=query_args["txhash"][0]

    rpcrequest=[{"jsonrpc":"2.0", "method":"eth_blockNumber", "id":1}, {"jsonrpc":"2.0", "method":"eth_getTransactionByHash", "params":[txhash], "id":2}]

    request=Request("http://"+config["node"], data=json.dumps(rpcrequest).encode("latin1"), headers={"Content-Type": "application/json"})
    reply=urlopen(request)
    if reply.getcode()!=200:
        sys.stdout.write(b"Status: 500 Internal Server Error\n\nNode error\n")
        sys.exit(0)

    replyJson=json.loads(reply.read().decode("latin1"))

    topBlock=int(replyJson[0]["result"], 16)

    if "result" in replyJson[1] and replyJson[1]["result"] is not None and replyJson[1]["result"]["blockNumber"] is not None and topBlock-int(replyJson[1]["result"]["blockNumber"], 16)>1:
        res={"result": generateSwype(replyJson[1]["result"]["blockHash"], replyJson[1]["result"]["hash"])}
    else:
        res={"result": None}

    sys.stdout.write(b"Status: 200 OK\nContent-Type: application/json\n\n"+json.dumps(res).encode("latin1")+b"\n")
else:
    sys.stdout.write(b"Status: 400 Bad Request\n\n")
